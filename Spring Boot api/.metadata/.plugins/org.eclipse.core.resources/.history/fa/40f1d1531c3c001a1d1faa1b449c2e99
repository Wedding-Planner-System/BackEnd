/*
 *  Purpose: for handling Venue related actions
 *  Date: 19-01-2020
 *  Author:Poonam Kadam
 * 
 */

package com.weddingplanner.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.imageio.ImageIO;

import org.apache.tomcat.util.json.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.weddingplanner.pojos.Venue;
import com.weddingplanner.service.IVenueService;

@RestController
@RequestMapping("/venue")
@CrossOrigin
public class VenueController
{

	@Autowired
	private IVenueService service;

	@PostConstruct
	public void init() {
		System.out.println("in init " + service);
	}
	
	
	// REST request handling method to  get all venues.
	@GetMapping
	public ResponseEntity<?> getAllVenues() 
	{
		System.out.println("in gel all venues");
		// invoke service layer method to get venueslist
		List<Venue> allVenues = service.getAllVenues();
		if (allVenues.size() == 0)
			return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
		return new ResponseEntity<List<Venue>>(allVenues, HttpStatus.OK);
	}

	// REST request handling method to get venue details by id
	@GetMapping("/{empId}")
	public ResponseEntity<?> getVenueDetails(@PathVariable int venueId) {
		System.out.println("get venue dtls " + venueId);
		Venue venueDetails = service.getVenueDetails(venueId);
		if (venueDetails == null)
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		return new ResponseEntity<Venue>(venueDetails, HttpStatus.OK);
	}

	
	@PostMapping
	public ResponseEntity<?> saveVenueDetails(@RequestBody Venue venue) {
		

		try {
			Venue theVenue =venue;
			
			
//			if (image != null) {
//				// image is supplied
//				System.out.println(image.getBytes());
//			}
			
			BufferedImage img = ImageIO.read(new ByteArrayInputStream());
			System.out.println(img);
			File outputfile = new File("D:/image.jpg");
			ImageIO.write(img, "jpg", outputfile);
			
			
			return new ResponseEntity<Venue>(theVenue, HttpStatus.CREATED);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	@DeleteMapping("/{venueId}")
	public ResponseEntity<Void> deleteVenue(@PathVariable int venueId) {
		System.out.println("del emp dtls " + venueId);
		service.deleteVenue(venueId);
		return new ResponseEntity<>(HttpStatus.OK);

	}

	@PutMapping("/{venueId}")
	public ResponseEntity<?> updateEmpDtls(@RequestParam String name, @RequestParam String address,
			@RequestParam(value = "image", required = false) MultipartFile image, @PathVariable int venueId) {
		

		Venue venueDetails = service.getVenueDetails(venueId);
		if (venueDetails == null)
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND); // emp found try {
		venueDetails.setVenueName(name);
		venueDetails.setCapacity(1000);
		try {
			if (image != null) { // image is supplied
				venueDetails.setVenueImage(image.getBytes());
			}
			return new ResponseEntity<Venue>(service.updateVenueDetails(venueDetails), HttpStatus.OK);
		} catch (Exception e1) {
			e1.printStackTrace();// only for debugging
			return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
	
	public static void writeByteToImageFile(byte[] imgBytes, String imgFileName) throws IOException  
    {  
         File imgFile = new File(imgFileName);  
         BufferedImage img = ImageIO.read(new ByteArrayInputStream(imgBytes)); 
         System.out.println(img);
         System.out.println(Arrays.toString(imgBytes));
		
         ImageIO.write(img, "png", imgFile);  
         
         System.out.println(img);
    }

}